import { useMemo, useState } from "react";
import { fprint, getNextFormat } from "./utils";
import { ComputerState } from "../../../cpusim";
import { isOn } from "../emulator/Bits";
import { CTRL } from "../emulator/Controller";
import { CpuComponent, CpuSignal, CpuValue } from "../components/CpuComponent";

const opcodes: Record<string, string> = {
  "3C": "INR A",
  "04": "INR B",
  "0C": "INR C",
  "14": "INR D",
  "1C": "INR E",
  "24": "INR H",
  "2C": "INR L",
  "34": "INR M",
  "3D": "DCR A",
  "05": "DCR B",
  "0D": "DCR C",
  "15": "DCR D",
  "1D": "DCR E",
  "25": "DCR H",
  "2D": "DCR L",
  "35": "DCR M",
  "03": "INX B",
  "13": "INX D",
  "23": "INX H",
  "33": "INX SP",
  "0B": "DCX B",
  "1B": "DCX D",
  "2B": "DCX H",
  "3B": "DCX SP",
  "09": "DAD B",
  "19": "DAD D",
  "29": "DAD H",
  "39": "DAD SP",
  "87": "ADD A",
  "80": "ADD B",
  "81": "ADD C",
  "82": "ADD D",
  "83": "ADD E",
  "84": "ADD H",
  "85": "ADD L",
  "86": "ADD M",
  C6: "ADI d8",
  "8F": "ADC A",
  "88": "ADC B",
  "89": "ADC C",
  "8A": "ADC D",
  "8B": "ADC E",
  "8C": "ADC H",
  "8D": "ADC L",
  "8E": "ADC M",
  CE: "ACI d8",
  "97": "SUB A",
  "90": "SUB B",
  "91": "SUB C",
  "92": "SUB D",
  "93": "SUB E",
  "94": "SUB H",
  "95": "SUB L",
  "96": "SUB M",
  D6: "SUI d8",
  "9F": "SBB A",
  "98": "SBB B",
  "99": "SBB C",
  "9A": "SBB D",
  "9B": "SBB E",
  "9C": "SBB H",
  "9D": "SBB L",
  "9E": "SBB M",
  DE: "SBI d8",
  A7: "ANA A",
  A0: "ANA B",
  A1: "ANA C",
  A2: "ANA D",
  A3: "ANA E",
  A4: "ANA H",
  A5: "ANA L",
  A6: "ANA M",
  E6: "ANI d8",
  B7: "ORA A",
  B0: "ORA B",
  B1: "ORA C",
  B2: "ORA D",
  B3: "ORA E",
  B4: "ORA H",
  B5: "ORA L",
  B6: "ORA M",
  F6: "ORI d8",
  AF: "XRA A",
  A8: "XRA B",
  A9: "XRA C",
  AA: "XRA D",
  AB: "XRA E",
  AC: "XRA H",
  AD: "XRA L",
  AE: "XRA M",
  EE: "XRI d8",
  "07": "RLC	",
  "17": "RAL	",
  "1F": "RAR	",
  "0F": "RRC	",
  "2F": "CMA	",
  "37": "STC	",
  "3F": "CMC	",
  BF: "CMP A",
  B8: "CMP B",
  B9: "CMP C",
  BA: "CMP D",
  BB: "CMP E",
  BC: "CMP H",
  BD: "CMP L",
  BE: "CMP M",
  FE: "CPI byte",
  "3A": "LDA addr",
  "0A": "LDAX B",
  "1A": "LDAX D",
  "01": "LXI B, dble",
  "11": "LXI D, dble",
  "21": "LXI H, dble",
  "31": "LXI SP, dble",
  "32": "STA addr",
  "02": "STAX B",
  "12": "STAX D",
  "2A": "LHLD addr",
  "22": "SHLD addr",
  "7F": "MOV A, A",
  "78": "MOV A, B",
  "79": "MOV A, C",
  "7A": "MOV A, D",
  "7B": "MOV A, E",
  "7C": "MOV A, H",
  "7D": "MOV A, L",
  "7E": "MOV A, M",
  "47": "MOV B, A",
  "40": "MOV B, B",
  "41": "MOV B, C",
  "42": "MOV B, D",
  "43": "MOV B, E",
  "44": "MOV B, H",
  "45": "MOV B, L",
  "46": "MOV B, M",
  "4F": "MOV C, A",
  "48": "MOV C, B",
  "49": "MOV C, C",
  "4A": "MOV C, D",
  "4B": "MOV C, E",
  "4C": "MOV C, H",
  "4D": "MOV C, L",
  "4E": "MOV C, M",
  "57": "MOV D, A",
  "50": "MOV D, B",
  "51": "MOV D, C",
  "52": "MOV D, D",
  "53": "MOV D, E",
  "54": "MOV D, H",
  "55": "MOV D, L",
  "56": "MOV D, M",
  "5F": "MOV E, A",
  "58": "MOV E, B",
  "59": "MOV E, C",
  "5A": "MOV E, D",
  "5B": "MOV E, E",
  "5C": "MOV E, H",
  "5D": "MOV E, L",
  "5E": "MOV E, M",
  "67": "MOV H, A",
  "60": "MOV H, B",
  "61": "MOV H, C",
  "62": "MOV H, D",
  "63": "MOV H, E",
  "64": "MOV H, H",
  "65": "MOV H, L",
  "66": "MOV H, M",
  "6F": "MOV L, A",
  "68": "MOV L, B",
  "69": "MOV L, C",
  "6A": "MOV L, D",
  "6B": "MOV L, E",
  "6C": "MOV L, H",
  "6D": "MOV L, L",
  "6E": "MOV L, M",
  "77": "MOV M, A",
  "70": "MOV M, B",
  "71": "MOV M, C",
  "72": "MOV M, D",
  "73": "MOV M, E",
  "74": "MOV M, H",
  "75": "MOV M, L",
  "3E": "MVI A, d8",
  "06": "MVI B, d8",
  "0E": "MVI C, d8",
  "16": "MVI D, d8",
  "1E": "MVI E, d8",
  "26": "MVI H, d8",
  "2E": "MVI L, d8",
  "36": "MVI M, d8",
  C5: "PUSH B",
  D5: "PUSH D",
  E5: "PUSH H",
  F5: "PUSH PSW",
  C1: "POP B",
  D1: "POP D",
  E1: "POP H",
  F1: "POP PSW",
  CD: "CALL addr",
  F4: "CP addr",
  FC: "CM addr",
  C4: "CNZ addr",
  CC: "CZ addr",
  E4: "CPO addr",
  EC: "CPE addr",
  D4: "CNC addr",
  DC: "CC addr",
  C9: "RET",
  F0: "RP",
  F8: "RM",
  C0: "RNZ",
  C8: "RZ",
  E0: "RPO",
  E8: "RPE",
  D0: "RNC",
  D8: "RC",
  C3: "JMP addr",
  F2: "JP addr",
  FA: "JM addr",
  C2: "JNZ addr",
  CA: "JZ addr",
  E2: "JPO addr",
  EA: "JPE addr",
  D2: "JNC addr",
  DA: "JC addr",
  "00": "NOP",
  "76": "HLT",
  D3: "DISP",
};

export const IrUI = ({ compState }: { compState: ComputerState }) => {
  const [format, setFormat] = useState(16);

  const ctrl = useMemo(
    () => ({
      ir_we: isOn(compState.ctrl_word, CTRL.IR_WE),
      op: opcodes[compState.ir.toString(16).toUpperCase().padStart(2, "0")],
    }),
    [compState.ctrl_word, compState.ir]
  );

  const valueStatus = useMemo(() => {
    return { ir: ctrl.ir_we ? (compState.clkState == "tick" ? "active" : "ready") : "inactive" };
  }, [compState.clkState, ctrl.ir_we]);

  return (
    <CpuComponent
      label="IR"
      onFormatToggle={() => setFormat((cur) => getNextFormat(cur))}
      status={ctrl.ir_we ? "input" : "none"}
      direction={ctrl.ir_we ? "left" : "none"}>
      <div className="grid grid-cols-[2rem_auto] grid-flow-row gap-x-4 align-top auto-rows-min">
        <span>IR</span>
        <CpuValue value={fprint(compState.ir, format)} status={valueStatus.ir} />
        <span>OP</span> <span className="px-1.5">{ctrl.op}</span>
      </div>

      <div className="flex flex-col text-right">
        <CpuSignal label="IR_WE" active={ctrl.ir_we == 1} />
      </div>
    </CpuComponent>
  );
};
